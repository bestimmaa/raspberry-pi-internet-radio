{"name":"Raspberry-pi-internet-radio","tagline":"Not another raspberry pi internet radio.","body":"Raspberry Pi Internet Radio\r\n===========================\r\n\r\n## Hardware\r\n\r\n* Raspberry Pi\r\n* USB wifi dongle\r\n* 3x illuminated physical push buttons\r\n* A cheap digital picture frame (DPF)\r\n* USB powered hub (2.5A current)\r\n\r\n## Software\r\n\r\n* [Raspbian](http://www.raspbian.org)\r\n* [MPD](http://www.musicpd.org) - Music Player Daemon\r\n* [MPC](http://www.musicpd.org/clients/mpc/) - A client to control mpc\r\n* [lcd4linux](http://ssl.bulix.org/projects/lcd4linux/) - Display information on DPF\r\n* [node.js](http://nodejs.org) - Runs the API server\r\n\r\n## Installation\r\n\r\n### Flashing the DPF\r\n\r\nTo enable the DPF to work with lcd4linux a custom firmware is needed.\r\n\r\n### Compiling lcd4linux with DPF and Python plugin\r\n\r\nLcd4linux is a tool to control lcd displays connected to the computer. Plugins provide additonal functionality, using a DPF and accessing Python modules in this case.\r\n\r\n## Cheat Sheet\r\n\r\n### MPD playlist directory\r\n\r\n**/var/lib/mpd/playlists**\r\n\r\nUse this directory to maintain a collection of playlists. You can use the common playlist formats like .pls and .m3u. I'm maintaining a single playlist for every station (STATIONNAME.pls) and a single playlist with all of my favorite station. This way mpc can jump to a specific station with a *mpc clear* and following *mpc load STATIONNAME.pls* command. The [API server](chrisfmserver.js) makes use of this to change stations based on requests.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}